import Review from "../models/Review.js";
import { Telegraf, Markup } from "telegraf";

const bot = new Telegraf("7916561506:AAFIZ9WeSGBYOfv1LRQ4MZuDSSvERhNfyag");
const TELEGRAM_CHAT_ID = -4730504232;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫
bot.action(/approve_(.+)/, async (ctx) => {
  try {
    const reviewId = ctx.match[1];
    
    const review = await Review.findByIdAndUpdate(
      reviewId,
      { status: 'approved' },
      { new: true }
    );

    if (review) {
      await ctx.editMessageText(
        `‚úÖ –û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω!\n\nüë§ –ò–º—è: ${review.name}\n‚≠ê –û—Ü–µ–Ω–∫–∞: ${"‚≠ê".repeat(review.stars)} (${review.stars}/5)\nüí¨ –¢–µ–∫—Å—Ç: ${review.text}`
      );
      await ctx.answerCbQuery('–û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω!');
    } else {
      await ctx.answerCbQuery('–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞');
  }
});

bot.action(/reject_(.+)/, async (ctx) => {
  try {
    const reviewId = ctx.match[1];
    
    const review = await Review.findByIdAndUpdate(
      reviewId,
      { status: 'rejected' },
      { new: true }
    );

    if (review) {
      await ctx.editMessageText(
        `‚ùå –û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω!\n\nüë§ –ò–º—è: ${review.name}\n‚≠ê –û—Ü–µ–Ω–∫–∞: ${"‚≠ê".repeat(review.stars)} (${review.stars}/5)\nüí¨ –¢–µ–∫—Å—Ç: ${review.text}`
      );
      await ctx.answerCbQuery('–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω!');
    } else {
      await ctx.answerCbQuery('–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
    await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞');
  }
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.launch();

class ReviewController {
  async createReview(req, res) {
    try {
      const { stars, name, text } = req.body;

      if (!stars || !name || !text) {
        return res.status(400).json({
          message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥, –∏–º—è –∏ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞",
        });
      }

      if (stars < 1 || stars > 5) {
        return res.status(400).json({
          message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 5",
        });
      }

      const review = new Review({
        stars,
        name,
        text,
        status: 'pending' // –û—Ç–∑—ã–≤ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
      });

      const savedReview = await review.save();

      const starsDisplay = "‚≠ê".repeat(stars);
      const message = `
üì£ –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!

üë§ –ò–º—è: ${name}
‚≠ê –û—Ü–µ–Ω–∫–∞: ${starsDisplay} (${stars}/5)
üí¨ –¢–µ–∫—Å—Ç: ${text}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

      // –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
      const keyboard = Markup.inlineKeyboard([
        [
          Markup.button.callback('‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å', `approve_${savedReview._id}`),
          Markup.button.callback('‚ùå –£–¥–∞–ª–∏—Ç—å', `reject_${savedReview._id}`)
        ]
      ]);

      await bot.telegram.sendMessage(TELEGRAM_CHAT_ID, message, keyboard);

      return res.status(201).json({
        success: true,
        message: "–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é",
        review: savedReview,
      });
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞",
        error: error.message,
      });
    }
  }

  async getAllReviews(req, res) {
    try {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ API
      const reviews = await Review.find({ status: 'approved' }).sort({ createdAt: -1 });
      return res.json(reviews);
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤",
      });
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ (–≤–∫–ª—é—á–∞—è pending –∏ rejected)
  async getAllReviewsAdmin(req, res) {
    try {
      const reviews = await Review.find().sort({ createdAt: -1 });
      return res.json(reviews);
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤",
      });
    }
  }

  // –†—É—á–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∑—ã–≤–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∫–∏)
  async updateReviewStatus(req, res) {
    try {
      const { id } = req.params;
      const { status } = req.body;

      if (!['pending', 'approved', 'rejected'].includes(status)) {
        return res.status(400).json({
          success: false,
          message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: pending, approved, rejected"
        });
      }

      const review = await Review.findByIdAndUpdate(
        id,
        { status },
        { new: true }
      );

      if (!review) {
        return res.status(404).json({
          success: false,
          message: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        });
      }

      return res.json({
        success: true,
        message: "–°—Ç–∞—Ç—É—Å –æ—Ç–∑—ã–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω",
        review
      });
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–∑—ã–≤–∞"
      });
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
  async deleteReview(req, res) {
    try {
      const { id } = req.params;
      
      const review = await Review.findById(id);
      if (!review) {
        return res.status(404).json({
          success: false,
          message: "–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        });
      }

      await Review.findByIdAndDelete(id);

      return res.json({
        success: true,
        message: "–û—Ç–∑—ã–≤ —É–¥–∞–ª–µ–Ω"
      });
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞"
      });
    }
  }
}

export default new ReviewController();
