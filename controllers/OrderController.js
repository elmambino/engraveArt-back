import { Telegraf } from "telegraf";
import Order from "../models/Orders.js";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
const bot = new Telegraf("7916561506:AAFIZ9WeSGBYOfv1LRQ4MZuDSSvERhNfyag");
const TELEGRAM_CHAT_ID = -4730504232;

// –í—ã–Ω–µ—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–ª–∞—Å—Å–∞
const validatePhoneNumber = (phoneNumber) => {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã, —Å–∫–æ–±–∫–∏ –∏ –ø–ª—é—Å—ã
  const cleanPhone = phoneNumber.replace(/[\s\-\(\)\+]/g, '');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
  if (!/^\d+$/.test(cleanPhone)) {
    return { isValid: false, message: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã" };
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞ (–æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä - –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
  if (cleanPhone.length < 10 || cleanPhone.length > 15) {
    return { isValid: false, message: "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 10 –¥–æ 15 —Ü–∏—Ñ—Ä" };
  }
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
  if (cleanPhone.length === 11 && cleanPhone.startsWith('8')) {
    // –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å 8
    if (!/^8[3-9]\d{9}$/.test(cleanPhone)) {
      return { isValid: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞" };
    }
  } else if (cleanPhone.length === 11 && cleanPhone.startsWith('7')) {
    // –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å 7
    if (!/^7[3-9]\d{9}$/.test(cleanPhone)) {
      return { isValid: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞" };
    }
  } else if (cleanPhone.length === 10) {
    // –†–æ—Å—Å–∏–π—Å–∫–∏–π –Ω–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    if (!/^[3-9]\d{9}$/.test(cleanPhone)) {
      return { isValid: false, message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞" };
    }
  }
  
  return { isValid: true, cleanPhone };
};

const validateCustomerName = (name) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ—Ñ–∏—Å—ã
  const nameRegex = /^[–∞-—è—ë–ê-–Ø–Åa-zA-Z\s\-]+$/;
  
  if (!nameRegex.test(name.trim())) {
    return { isValid: false, message: "–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã" };
  }
  
  if (name.trim().length < 2) {
    return { isValid: false, message: "–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞" };
  }
  
  return { isValid: true, cleanName: name.trim() };
};

class OrderController {
  async createOrder(req, res) {
    try {
      const { text, customerName, phoneNumber } = req.body;

      if (!text || !customerName || !phoneNumber) {
        return res.status(400).json({
          message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞, –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –§–ò–û
      const nameValidation = validateCustomerName(customerName);
      if (!nameValidation.isValid) {
        return res.status(400).json({
          success: false,
          message: nameValidation.message,
        });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const phoneValidation = validatePhoneNumber(phoneNumber);
      if (!phoneValidation.isValid) {
        return res.status(400).json({
          success: false,
          message: phoneValidation.message,
        });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–∫–∞–∑–∞
      if (text.trim().length < 5) {
        return res.status(400).json({
          success: false,
          message: "–¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤",
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const order = new Order({
        text: text.trim(),
        customerName: nameValidation.cleanName,
        phoneNumber: phoneValidation.cleanPhone,
      });

      const savedOrder = await order.save();

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
      const message = `
üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${savedOrder._id}!
üë§ –§–ò–û: ${nameValidation.cleanName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phoneValidation.cleanPhone}
üìù –¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞: ${text.trim()}
      `;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
      await bot.telegram.sendMessage(TELEGRAM_CHAT_ID, message);

      return res.status(200).json({
        success: true,
        message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
        order: savedOrder,
      });
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
        error: error.message,
      });
    }
  }

  async getAllOrders(req, res) {
    try {
      const orders = await Order.find().sort({ createdAt: -1 });
      return res.json(orders);
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤",
      });
    }
  }

  async getOrderById(req, res) {
    try {
      const order = await Order.findById(req.params.id);
      if (!order) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      return res.json(order);
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
      });
    }
  }

  async updateOrderStatus(req, res) {
    try {
      const { status } = req.body;
      if (!status) {
        return res
          .status(400)
          .json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞" });
      }

      const updatedOrder = await Order.findByIdAndUpdate(
        req.params.id,
        { status },
        { new: true }
      );

      if (!updatedOrder) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      return res.json(updatedOrder);
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞",
      });
    }
  }
}

export default new OrderController();
