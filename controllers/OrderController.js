import { Telegraf } from "telegraf";
import Order from "../models/orders.js";

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ Telegram
const bot = new Telegraf("7095638242:AAGY5RGu26_GFqM60YEVKt6WPwrSXiM6NQ0");
const TELEGRAM_CHAT_ID = -4730504232;

class OrderController {
  async createOrder(req, res) {
    try {
      const { text, customerName, phoneNumber } = req.body;

      if (!text || !customerName || !phoneNumber) {
        return res.status(400).json({
          message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞, –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        });
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const order = new Order({
        text,
        customerName,
        phoneNumber,
      });

      const savedOrder = await order.save();

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
      const message = `
üìã –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #${savedOrder._id}!
üë§ –§–ò–û: ${customerName}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phoneNumber}
üìù –¢–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞: ${text}
      `;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
      await bot.telegram.sendMessage(TELEGRAM_CHAT_ID, message);

      return res.status(200).json({
        success: true,
        message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
        order: savedOrder,
      });
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        success: false,
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
        error: error.message,
      });
    }
  }

  async getAllOrders(req, res) {
    try {
      const orders = await Order.find().sort({ createdAt: -1 });
      return res.json(orders);
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤",
      });
    }
  }

  async getOrderById(req, res) {
    try {
      const order = await Order.findById(req.params.id);
      if (!order) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      return res.json(order);
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞",
      });
    }
  }

  async updateOrderStatus(req, res) {
    try {
      const { status } = req.body;
      if (!status) {
        return res
          .status(400)
          .json({ message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞" });
      }

      const updatedOrder = await Order.findByIdAndUpdate(
        req.params.id,
        { status },
        { new: true }
      );

      if (!updatedOrder) {
        return res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      return res.json(updatedOrder);
    } catch (error) {
      console.log(error);
      return res.status(500).json({
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞",
      });
    }
  }
}

export default new OrderController();
